# vim: syntax=ruby

class PuppetDB::Parser

token LPAREN RPAREN LBRACK RBRACK LBRACE RBRACE
token ISEQUAL NOTEQUAL MATCH NOMATCH LESSTHAN GREATERTHAN
token NOT AND OR
token NUMBER STRING BOOLEAN ATAT

prechigh
  right NOT
  left  EQUALS MATCH LESSTHAN GREATERTHAN
  left  AND
  left  OR
preclow

rule
query
  : expression
  | nil

expression
  : primary_expression
  | expression MATCH        expression        { result = val[0] =~  val[2] }
  | expression NOMATCH      expression        { result = val[0].mne val[2] }
  | expression NOTEQUAL     expression        { result = val[0].ne  val[2] }
  | expression ISEQUAL      expression        { result = val[0] ==  val[2] }
  | expression GREATERTHAN  expression        { result = val[0] >   val[2] }
  | expression GREATEREQUAL expression        { result = val[0] >=  val[2] }
  | expression LESSTHAN     expression        { result = val[0] <   val[2] }
  | expression LESSEQUAL    expression        { result = val[0] <=  val[2] }
  |            NOT          expression        { result = val[1].not }
  | expression AND          expression        { result = val[0].and val[2] }
  | expression OR           expression        { result = val[0].or  val[2] }
  |            LPAREN       expression RPAREN { result = val[1].paren() }

primary_expression
  : literal_expression
  | resource_expression

literal_expression
  : boolean
  | string
  | number
  | undef

boolean  : BOOLEAN  { result = Factory.literal(val[0][:value]) }
number   : NUMBER   { result = Factory.NUMBER(val[0][:value]) }
string   : STRING   { result = Factory.literal(val[0][:value]) }
undef    : UNDEF    { result = Factory.literal(:undef) }

resource_expression
  : resource_type resource_parameters {
      result = Factory.COLLECT(val[0], Factory.VIRTUAL_QUERY(val[1]), []) }
    }
  | resource_type resource_name resource_parameters {
      result = Factory.COLLECT(val[0], Factory.VIRTUAL_QUERY(val[1].and val[2]), []) }
    }
  : resource_exported resource_type resource_parameters {
      result = Factory.COLLECT(val[1], Factory.EXPORTED_QUERY(val[2]), []) }
    }
  | resource_exported resource_type resource_name resource_parameters {
      result = Factory.COLLECT(val[1], Factory.EXPORTED_QUERY(val[2].and val[3]), []) }
    }

resource_exported
  : ATAT

resource_type
  : string
  |                             { result = Factory.literal(:undef) }

resource_title
  : LBRACK string RBRACK        { result = Factory.literal('title') == val[1] }
  | LBRACK MATCH string RBRACK  { result = Factory.literal('title') =~ val[2] }

resource_parameters
  : LBRACE expression RBRACE    { result = val[1] }

end
---- header ----
require 'puppet'
require 'puppet/pops'
require 'puppetdb'
require 'puppetdb/lexer'
