#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppetdb'
require 'puppetdb/lexer'
require 'puppetdb/astnode'
module PuppetDB
  class Parser < PuppetDB::Lexer
##### State transition tables begin ###

racc_action_table = [
     4,     4,     5,     5,     8,     8,   -29,   -29,   -29,   -29,
   -29,     3,     3,    36,    47,     9,     9,    12,    12,     4,
     4,     5,     5,     8,     8,    16,    17,     5,    36,     8,
     3,     3,    16,    17,     9,     9,    12,    12,     4,     4,
     5,     5,     8,     8,     5,    32,     8,    41,     8,     3,
     3,    49,    48,     9,     9,    12,    12,    28,    16,    17,
    20,    21,    22,    18,    19,    36,    41,    42,    36,    41,
    42,    25,     8,    51,    16 ]

racc_action_check = [
     0,    17,     0,    17,     0,    17,     9,     9,     9,     9,
     9,     0,    17,    19,    24,     0,    17,     0,    17,     8,
     3,     8,     3,     8,     3,    24,    24,    11,    18,    11,
     8,     3,     1,     1,     8,     3,     8,     3,     4,    16,
     4,    16,     4,    16,    10,    15,    10,    22,    13,     4,
    16,    26,    25,     4,    16,     4,    16,    10,    26,    26,
     2,     2,     2,     2,     2,    21,    21,    21,    20,    20,
    20,     5,    29,    32,    34 ]

racc_action_pointer = [
    -2,    18,    52,    18,    36,    54,   nil,   nil,    17,    -2,
    40,    23,   nil,    42,   nil,    45,    37,    -1,    12,    -3,
    52,    49,    30,   nil,    11,    47,    44,   nil,   nil,    66,
   nil,   nil,    73,   nil,    60,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil ]

racc_action_default = [
   -32,    -1,   -32,   -32,   -32,   -32,   -15,   -16,   -32,   -26,
   -32,   -18,   -25,   -19,   -20,   -32,   -32,   -32,   -32,   -32,
   -32,   -32,   -32,    -3,   -32,   -32,   -32,   -17,   -26,   -21,
   -23,   -22,   -32,    -4,    -5,   -10,   -30,    -9,    -6,    -7,
    -8,   -29,   -31,   -14,   -13,   -12,   -11,    -2,   -27,   -28,
   -24,    52 ]

racc_goto_table = [
    30,    27,    31,     1,    39,    44,    23,    24,    38,    43,
    46,    26,    35,    37,    40,    45,    29,    15,    50,    33,
    34 ]

racc_goto_check = [
    11,     7,    11,     2,     4,     4,     2,     2,     3,     3,
     3,     2,     5,     5,     5,     5,    10,     1,    11,     2,
     2 ]

racc_goto_pointer = [
   nil,    17,     3,   -12,   -16,    -6,   nil,    -9,   nil,   nil,
     5,   -11 ]

racc_goto_default = [
   nil,   nil,   nil,     2,   nil,   nil,     6,     7,    10,    11,
    13,    14 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 21, :_reduce_none,
  3, 22, :_reduce_2,
  2, 22, :_reduce_3,
  3, 22, :_reduce_4,
  3, 22, :_reduce_5,
  3, 22, :_reduce_6,
  3, 22, :_reduce_7,
  3, 22, :_reduce_8,
  3, 22, :_reduce_9,
  3, 22, :_reduce_10,
  3, 22, :_reduce_11,
  3, 22, :_reduce_12,
  3, 22, :_reduce_13,
  3, 22, :_reduce_14,
  1, 22, :_reduce_none,
  1, 26, :_reduce_16,
  2, 26, :_reduce_17,
  1, 27, :_reduce_18,
  1, 27, :_reduce_19,
  1, 27, :_reduce_20,
  2, 27, :_reduce_21,
  2, 27, :_reduce_22,
  2, 27, :_reduce_23,
  3, 27, :_reduce_24,
  1, 28, :_reduce_none,
  1, 29, :_reduce_26,
  3, 30, :_reduce_27,
  3, 31, :_reduce_28,
  1, 23, :_reduce_29,
  1, 25, :_reduce_30,
  1, 24, :_reduce_31 ]

racc_reduce_n = 32

racc_shift_n = 52

racc_token_table = {
  false => 0,
  :error => 1,
  :LPAREN => 2,
  :RPAREN => 3,
  :LBRACK => 4,
  :RBRACK => 5,
  :LBRACE => 6,
  :RBRACE => 7,
  :EQUALS => 8,
  :NOTEQUALS => 9,
  :MATCH => 10,
  :LESSTHAN => 11,
  :GREATERTHAN => 12,
  :NOT => 13,
  :AND => 14,
  :OR => 15,
  :NUMBER => 16,
  :STRING => 17,
  :BOOLEAN => 18,
  :EXPORTED => 19 }

racc_nt_base = 20

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "LPAREN",
  "RPAREN",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "EQUALS",
  "NOTEQUALS",
  "MATCH",
  "LESSTHAN",
  "GREATERTHAN",
  "NOT",
  "AND",
  "OR",
  "NUMBER",
  "STRING",
  "BOOLEAN",
  "EXPORTED",
  "$start",
  "query",
  "exp",
  "string",
  "boolean",
  "number",
  "ressubquery",
  "resexp",
  "resexported",
  "restype",
  "restitle",
  "resparams" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'grammar.y', 20)
  def _reduce_2(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 21)
  def _reduce_3(val, _values, result)
     result = ASTNode.new :booleanop, :not, [val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 22)
  def _reduce_4(val, _values, result)
     result = ASTNode.new :booleanop, :and, [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 23)
  def _reduce_5(val, _values, result)
     result = ASTNode.new :booleanop, :or, [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 24)
  def _reduce_6(val, _values, result)
     result = ASTNode.new :exp, :equals, [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 25)
  def _reduce_7(val, _values, result)
     result = ASTNode.new :exp, :equals, [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 26)
  def _reduce_8(val, _values, result)
     result = ASTNode.new :exp, :equals, [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 27)
  def _reduce_9(val, _values, result)
     result = ASTNode.new :exp, :greaterthan, [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 28)
  def _reduce_10(val, _values, result)
     result = ASTNode.new :exp, :lessthan, [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 29)
  def _reduce_11(val, _values, result)
     result = ASTNode.new :exp, :match, [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 30)
  def _reduce_12(val, _values, result)
     result = ASTNode.new :booleanop, :not, [ASTNode.new(:exp, :equals, [val[0], val[2]])] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 31)
  def _reduce_13(val, _values, result)
     result = ASTNode.new :booleanop, :not, [ASTNode.new(:exp, :equals, [val[0], val[2]])] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 32)
  def _reduce_14(val, _values, result)
     result = ASTNode.new :booleanop, :not, [ASTNode.new(:exp, :equals, [val[0], val[2]])] 
    result
  end
.,.,

# reduce 15 omitted

module_eval(<<'.,.,', 'grammar.y', 35)
  def _reduce_16(val, _values, result)
     result = ASTNode.new :subquery, :resources, [ASTNode.new(:booleanop, :and, [ASTNode.new(:resexported, false), *val[0]])] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 36)
  def _reduce_17(val, _values, result)
     result = ASTNode.new :subquery, :resources, [ASTNode.new(:booleanop, :and, [ASTNode.new(:resexported, true), *val[1]])] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 38)
  def _reduce_18(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 39)
  def _reduce_19(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 40)
  def _reduce_20(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 41)
  def _reduce_21(val, _values, result)
     result = [val[0], val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 42)
  def _reduce_22(val, _values, result)
     result = [val[0], val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 43)
  def _reduce_23(val, _values, result)
     result = [val[0], val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 44)
  def _reduce_24(val, _values, result)
     result = [val[0], val[1], val[2]] 
    result
  end
.,.,

# reduce 25 omitted

module_eval(<<'.,.,', 'grammar.y', 47)
  def _reduce_26(val, _values, result)
     result = ASTNode.new :resourcetype, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 48)
  def _reduce_27(val, _values, result)
     result = ASTNode.new :resourcetitle, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 49)
  def _reduce_28(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 51)
  def _reduce_29(val, _values, result)
     result = ASTNode.new :string, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 52)
  def _reduce_30(val, _values, result)
     result = ASTNode.new :number, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 53)
  def _reduce_31(val, _values, result)
     result = ASTNode.new :boolean, val[0] 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module PuppetDB
